import click

from rastervision.builders import (compute_stats_builder, make_chips_builder,
                                   train_builder, predict_builder,
                                   eval_builder)
from rastervision.commands.predict_package import PredictPackage


def _compute_stats(config_uri):
    command = compute_stats_builder.build(config_uri)
    command.run()


@click.command()
@click.argument('config_uri')
def compute_stats(config_uri):
    _compute_stats(config_uri)


def _make_chips(config_uri):
    command = make_chips_builder.build(config_uri)
    command.run()


@click.command()
@click.argument('config_uri')
def make_chips(config_uri):
    _make_chips(config_uri)


def _train(config_uri):
    command = train_builder.build(config_uri)
    command.run()


@click.command()
@click.argument('config_uri')
def train(config_uri):
    _train(config_uri)


def _predict(config_uri):
    command = predict_builder.build(config_uri)
    command.run()


@click.command()
@click.argument('config_uri')
def predict(config_uri):
    _predict(config_uri)


def _predict_package(predict_package_uri,
                     labels_uri,
                     image_uris,
                     update_stats=False,
                     channel_order=None):
    command = PredictPackage(
        predict_package_uri,
        labels_uri,
        image_uris,
        update_stats=update_stats,
        channel_order=channel_order)
    command.run()


@click.command()
@click.argument('predict_package_uri')
@click.argument('labels_uri')
@click.argument('image_uris', nargs=-1)
@click.option(
    '--update-stats',
    is_flag=True,
    help='Compute and use raster stats based on image_uris')
@click.option(
    '--channel-order',
    help='String containing channel_order.' + ' Example: \"2 1 0\"')
def predict_package(predict_package_uri, labels_uri, image_uris, update_stats,
                    channel_order):
    """Make predictions on new imagery using a prediction package.

    predict_package_uri: URI of package generated by predict command

    labels_uri: URI of labels that will be generated

    image_uris: URIS of image files that comprise the RasterSource on which to
        make predictions. These need to be GeoTIFF files.
    """
    if channel_order is not None:
        channel_order = [
            int(channel_ind) for channel_ind in channel_order.split(' ')
        ]

    _predict_package(
        predict_package_uri,
        labels_uri,
        image_uris,
        update_stats=update_stats,
        channel_order=channel_order)


def _eval(config_uri):
    command = eval_builder.build(config_uri)
    command.run()


@click.command()
@click.argument('config_uri')
def eval(config_uri):
    _eval(config_uri)


@click.group()
def run():
    pass


run.add_command(compute_stats)
run.add_command(make_chips)
run.add_command(train)
run.add_command(predict)
run.add_command(predict_package)
run.add_command(eval)

if __name__ == '__main__':
    run()
